/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.MEInterface;

import His.HisSystem;
import His.Network.Enterprise.Enterprise;
import His.Network.Organization.Organization;
import His.Network.WorkQueue.GeneralAccountingWork;
import His.Network.WorkQueue.HosWork.PurchasingWork;
import His.Network.WorkQueue.MEWork.Medicine;
import His.Network.WorkQueue.MEWork.MedicineDictionary;
import His.Network.WorkQueue.MEWork.MedicineStorage;
import His.Network.WorkQueue.WorkRequest;
import His.UserAccount.UserAccount;
import UserInterface.ModifyAccount.ModifyAccount;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hp
 */
public class ExportJPanel extends javax.swing.JPanel {

    /**
     * Creates new form ExportJPanel
     */
    private JPanel rightPanel;
    private MedicineDictionary medicineDictionary;
    
    private UserAccount account;
    private Organization organization;
    private HisSystem business;
    private Enterprise enterprise;

    public ExportJPanel(JPanel userProcessContainer, UserAccount account, Organization organization, Enterprise enterprise, HisSystem business) {
        initComponents();
        this.rightPanel=userProcessContainer;
        this.account=account;
        this.business=business;
        this.organization=organization;
       
        this.enterprise=enterprise;
        this.medicineDictionary=enterprise.getStorage();
        ArrayList<MedicineStorage> medicines=new ArrayList<MedicineStorage>();
        for(MedicineStorage medicineStorage:medicineDictionary.getMedicineStorageMap().values()){
           medicines.add(medicineStorage);
        }
        populatetable(medicines);
        popOrder();
    }
    public void popOrder(){
        DefaultTableModel dtm=(DefaultTableModel)jTable2.getModel();
         dtm.setRowCount(0);
        for(WorkRequest request:this.organization.getWorkQueue().getWorkRequestList()){
           Object[] row=new Object[4];
           row[0]=((PurchasingWork)request).getMedicineStorage();
           row[1]=((PurchasingWork)request).getHospital();
           row[2]=String.valueOf(((PurchasingWork)request).getAmount());
           row[3]=request;
           dtm.addRow(row);
           }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        searchByNameBtn = new javax.swing.JButton();
        searchByClassBtn = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        classTextField = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        btnModify = new javax.swing.JButton();

        jLabel1.setText("ExportDepartment");

        searchByNameBtn.setText("SearchStorageByName");
        searchByNameBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByNameBtnActionPerformed(evt);
            }
        });

        searchByClassBtn.setText("SearchByClassfication");
        searchByClassBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchByClassBtnActionPerformed(evt);
            }
        });

        jButton3.setText("<back");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "name", "amount"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jLabel2.setText("name");

        jLabel3.setText("classification");

        jButton1.setText("export");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel5.setText("Storage");

        jLabel6.setText("Order");

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "name", "Hospital", "Count", "Message"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        jButton2.setText("View Detail");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        btnModify.setText("Modify Password");
        btnModify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModifyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(searchByNameBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(searchByClassBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(classTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3)
                            .addComponent(btnModify, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(70, 70, 70)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(212, 212, 212)
                        .addComponent(jLabel6))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(203, 203, 203)
                        .addComponent(jLabel5))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(77, 77, 77)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 201, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addComponent(jLabel5))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnModify)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchByNameBtn)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchByClassBtn)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel3)
                        .addComponent(classTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(70, 70, 70))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        rightPanel.remove(this);
          CardLayout layout=(CardLayout)rightPanel.getLayout();
          layout.previous(rightPanel);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void searchByNameBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByNameBtnActionPerformed
        // TODO add your handling code here:
        String name=nameTextField.getText();
        if(name == null || name.equals(""))
        {
            JOptionPane.showMessageDialog(null,"Please enter name!");
            return;
        }
        ArrayList<MedicineStorage> result=medicineDictionary.searchByname(name);
        if(result==null){
              JOptionPane.showMessageDialog(null,"No storage","Information",JOptionPane.INFORMATION_MESSAGE);
              return;
        }else{
        populatetable(result);    
    }//GEN-LAST:event_searchByNameBtnActionPerformed
    }
    private void searchByClassBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchByClassBtnActionPerformed
        // TODO add your handling code here:
        String classfication=classTextField.getText();
        if(classfication == null || classfication.equals(""))
        {
            JOptionPane.showMessageDialog(null,"Please enter classfication!");
            return;
        }
        ArrayList<MedicineStorage> result=medicineDictionary.searchByclass(classfication);
        if(result==null){
              JOptionPane.showMessageDialog(null,"No storage","warning",JOptionPane.INFORMATION_MESSAGE);
              return;
        }else{
        populatetable(result);    
    }                           
        
    }//GEN-LAST:event_searchByClassBtnActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        int selectedRow=jTable2.getSelectedRow();
        if(selectedRow<0){
            JOptionPane.showMessageDialog(null,"Please select a row from table","warning",JOptionPane.WARNING_MESSAGE);


        }else{
            PurchasingWork request=(PurchasingWork)jTable2.getValueAt(selectedRow,3);
            
            if(request.getStatus().equals("pending") || request.getStatus().equals("completed")){
                return;
            }
            else{
                    
                   
                MedicineStorage result=(MedicineStorage)jTable2.getValueAt(selectedRow,0);
                GeneralAccountingWork garequest=new GeneralAccountingWork( Integer.parseInt((String)this.jTable2.getValueAt(selectedRow,2))*result.getPrice());
                garequest.setStatus("pending");
                garequest.setMessage("An Order");
                for(Map.Entry<String, Organization> entryOrganization:enterprise.getOrganizationDirectory().getOrganizationList().entrySet()){
                //Step 2.a: check against each enterprise
                            Organization org=entryOrganization.getValue();
                    if(org.getOrganizationtype()!=null){
                        if(org.getOrganizationtype().equals(Organization.Type.GeneralAccounting)){
                            org.getWorkQueue().getWorkRequestList().add(garequest);
                        }
                    }
                }
                int temp=result.getCount();
                if(temp>=Integer.parseInt((String)this.jTable2.getValueAt(selectedRow,2))){
                    result.setCount(temp-Integer.parseInt((String)this.jTable2.getValueAt(selectedRow,2)));
                    ArrayList<MedicineStorage> medicines=new ArrayList<MedicineStorage>();
                    for(MedicineStorage medicineStorage:medicineDictionary.getMedicineStorageMap().values()){
                        medicines.add(medicineStorage);
                    }
                    populatetable(medicines);
                    request.setStatus("pending");
                    request.setMessage("on the way");
                    MedicineStorage medicineStorage=new MedicineStorage(result);
                    medicineStorage.setCount(Integer.parseInt((String)this.jTable2.getValueAt(selectedRow,2)));
                    request.setMedicineStorage(medicineStorage);
                    JOptionPane.showMessageDialog(null, "export Successfully");

                }else{
                    JOptionPane.showMessageDialog(null,"not enough storage","warning",JOptionPane.WARNING_MESSAGE); 
                }
            }

      }
      this.popOrder();
        
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
         int selectedRow=jTable2.getSelectedRow();
          if(selectedRow<0){
          JOptionPane.showMessageDialog(null,"Please select a row from table","warning",JOptionPane.WARNING_MESSAGE);
          
          
          }else{
                WorkRequest result=(WorkRequest)jTable2.getValueAt(selectedRow,3);
                OrderDetailJPanel panel=new OrderDetailJPanel(rightPanel,result);
                rightPanel.add("MedicineDetaiJPanel",panel);
                CardLayout layout=(CardLayout)rightPanel.getLayout();
                layout.next(rightPanel);
          }
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void btnModifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModifyActionPerformed
        // TODO add your handling code here:
        CardLayout layout=(CardLayout)this.rightPanel.getLayout();
        this.rightPanel.add("modify",new ModifyAccount(this.account,this.rightPanel));
        layout.next(rightPanel);
    }//GEN-LAST:event_btnModifyActionPerformed
    
        

public void populatetable(ArrayList<MedicineStorage> medicines){
         DefaultTableModel dtm=(DefaultTableModel)jTable1.getModel();
         dtm.setRowCount(0);
        for(MedicineStorage medicineStorage:medicines){
           Object[] row=new Object[2];
           row[0]=medicineStorage;
           row[1]=medicineStorage.getCount();
           dtm.addRow(row);
           }
        }
   
        
     
    
    
    
    
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnModify;
    private javax.swing.JTextField classTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton searchByClassBtn;
    private javax.swing.JButton searchByNameBtn;
    // End of variables declaration//GEN-END:variables
}
